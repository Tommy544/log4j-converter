<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><!--This file was converted to xhtml by LibreOffice - see http://cgit.freedesktop.org/libreoffice/core/tree/filter/source/xslt for the code.--><head profile="http://dublincore.org/documents/dcmi-terms/"><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/><title xml:lang="">Log4j converter - Závěrečná zpráva</title><meta name="DCTERMS.title" content="Log4j converter - Závěrečná zpráva" xml:lang=""/><meta name="DCTERMS.language" content="" scheme="DCTERMS.RFC4646"/><meta name="DCTERMS.source" content="http://xml.openoffice.org/odf2xhtml"/><meta name="DCTERMS.modified" content="" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.provenance" content="" xml:lang=""/><meta name="DCTERMS.subject" content="," xml:lang=""/><meta name="DCTERMS.description" content="" xml:lang=""/><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" hreflang="en"/><link rel="schema.DCTERMS" href="http://purl.org/dc/terms/" hreflang="en"/><link rel="schema.DCTYPE" href="http://purl.org/dc/dcmitype/" hreflang="en"/><link rel="schema.DCAM" href="http://purl.org/dc/dcam/" hreflang="en"/><style type="text/css">
	@page {  }
	table { border-collapse:collapse; border-spacing:0; empty-cells:show }
	td, th { vertical-align:top; font-size:12pt;}
	h1, h2, h3, h4, h5, h6 { clear:both }
	ol, ul { margin:0; padding:0;}
	li { list-style: none; margin:0; padding:0;}
	<!-- "li span.odfLiEnd" - IE 7 issue-->
	li span. { clear: both; line-height:0; width:0; height:0; margin:0; padding:0; }
	span.footnodeNumber { padding-right:1em; }
	span.annotation_style_by_filter { font-size:95%; font-family:Arial; background-color:#fff000;  margin:0; border:0; padding:0;  }
	* { margin:0;}
	.Document_20_Title { font-size:12pt; font-family:Thorndale; writing-mode:page; text-align:center ! important; }
	.P1 { font-size:12pt; font-family:Thorndale; writing-mode:page; }
	.P2 { font-size:12pt; margin-bottom:0.212cm; margin-left:3cm; margin-right:0cm; margin-top:0cm; text-indent:0cm; font-family:Thorndale; writing-mode:page; }
	.P3 { font-size:12pt; margin-bottom:0.212cm; margin-left:3cm; margin-right:0cm; margin-top:0cm; text-indent:0cm; font-family:Thorndale; writing-mode:page; }
	.P4 { font-size:12pt; margin-bottom:0.212cm; margin-left:3cm; margin-right:0cm; margin-top:0cm; text-indent:0cm; font-family:Thorndale; writing-mode:page; }
	.Standard { font-size:12pt; font-family:Thorndale; writing-mode:page; }
	.Text_20_body { font-size:12pt; font-family:Thorndale; writing-mode:page; margin-top:0cm; margin-bottom:0.212cm; }
	.Bullet_20_Symbols { font-size:9pt; }
	.Emphasis { font-style:italic; }
	<!-- ODF styles with no properties representable as CSS -->
	.Sect1 .Endnote_20_Symbol .Footnote_20_Symbol .Numbering_20_Symbols  { }
	</style></head><body dir="ltr" style="max-width:20.999cm;margin-top:2.54cm; margin-bottom:2.54cm; margin-left:3.175cm; margin-right:3.175cm; writing-mode:lr-tb; "><!--Next 'div' was a 'text:section'.--><div class="Sect1" id="ArticleInfo"><p class="Document_20_Title">Log4j converter - Závěrečná zpráva</p><p class="Standard">Michal</p><p class="Standard">Pochobradský</p><p class="Standard"/></div><h1 class="P1"><a id="a__Log4j_converter"><span/></a>Log4j converter</h1><p class="Standard">Log4j converter</p><p class="Text_20_body">Cílem projektu bylo vytvořit konzolovou aplikaci na koverzi konfigurace log4j mezi formáty souborů properties a XML. Výsledná aplikace se skládá ze tří tříd:</p><ul><li><p class="P2" style="margin-left:3cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">.</span>Log4JConveter - hlavní třída aplikace, stará se o uživatelský vstup.<span class="odfLiEnd"/> </p></li><li><p class="P2" style="margin-left:3cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">.</span>XMLToProperties - stará se o konverzi z XML do properties<span class="odfLiEnd"/> </p></li><li><p class="P2" style="margin-left:3cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">.</span>PropertiesToXML - stará se o konverzi z properties do XML<span class="odfLiEnd"/> </p></li></ul><p class="Text_20_body"> </p><h1 class="P1"><a id="a__Třída_PropertiesToXML"><span/></a>Třída PropertiesToXML</h1><p class="Standard">Třída PropertiesToXML</p><p class="Text_20_body">Mým hlavním přínosem k projektu byla implementace třídy PropertiesToXML. Jak již bylo uvedeno její úlohou je konverze nastavení Log4j z, properties souboru do xml. Konvertovaný soubor je třídě předložen jako parametr konstruktoru. Samotnou konverzi zajišťuje metoda convert, která má dvě varianty, buď s jedním vstupním parametrem, kterým je název výstupní soubor do něhož se má výsledek konverze uložit, nebo bez parametru, pak se výsledek konverze vypíše na standartní výstup.</p><p class="Text_20_body">Vsstupní soubor je zpracováván pomocí třídy Properties a průběžné výsledky jsou udržovány ve formě DOM stromu prostředky prostředí Java. Konverze třídy je rozdělena do jednotlivých metod zpracovávajících konkrétní prvky konfigurace. Obecně lze tyto metody rozdělit na dvě skupiny podle toho kde se v XML nachází jimi generovaný element na prvky "hlavní" a "vedlejší".</p><ul><li><p class="P3" style="margin-left:3cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">.</span>Hlavní prvky - jsou prvky, které jsou přímo potomky kořenového elementu. Jejich metody jsou tvaru void convertNazevPrvku(Properties properties, SortedSet&lt;String&gt; keys, Element configurationElemnt), kde <span class="Emphasis">properties</span> obsahuje vstupní data, <span class="Emphasis">keys</span> jsou setřazené klíče do <span class="Emphasis">properties</span> (viz níže) a <span class="Emphasis">configurationElemnt</span> je kořenový element. Každá z těchto metod zná pevně danou předponu klíče podle které určí klíče, které náleží jí zpracovávanému prvku. Tyto metody jsou volány pouze metodou doConvert().<span class="odfLiEnd"/> </p></li><li><p class="P3" style="margin-left:3cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">.</span>Vedlejší prvky - jsou prvky, jež jsou částí některého hlavního prvku, tedy jsou potomky jeho elementu.Jejich metody jsou tvaru String processNazevPrvku(Properties properties, SortedSet&lt;String&gt; keys, String currentPrefix, Element element), kde význam <span class="Emphasis">properties</span> a <span class="Emphasis">keys</span> je stejný jako u hlavních prvků, <span class="Emphasis">currentPrefix</span> je předpona klíče prvku zpracovávaného volající funkcí a <span class="Emphasis">element</span> je XML element prvku generovaný volající funkcí. Tyto metody vytváří při každém volání novou předponu připojením svého "klíčovho slova" k přeponě <span class="Emphasis">currentPrefix</span>. Tyto metody jsou volány jednak z metod hlavních prvků, ale také se mohou volat mezi sebou.<span class="odfLiEnd"/> </p></li><li><p class="P3" style="margin-left:3cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">.</span>Vyjímky - metoda convertConfig,která generuje kořenový element log4j:configuration, je obdobou metod hlavních prvků, ale celkem logicky nemá atribut <span class="Emphasis">configurationElemnt</span>, naopak jej vrací. Metoda processParams je obdobou metod vedleších prvků, ale navíc má atributy <span class="Emphasis">position</span> a <span class="Emphasis">ignored</span>, kde <span class="Emphasis">position</span> je pozice, kam se mají do <span class="Emphasis">element</span>u vložit vygenerované elementy param a <span class="Emphasis">ignored</span> je seznam klíčových slov patřících jiným prvkům právě generovaného prvku.<span class="odfLiEnd"/> </p></li></ul><p class="Text_20_body">Asi největším problémem, na který jsem narazil, byl v tom, jak XML a properties přistupují k řazení prvků. Zatímco v properties může být pořadí prakticky libovolné, DTD log4j klade poměrně velmi striktní podmínky na pořadí jednotlivých elemntů. Rešení:</p><ul><li><p class="P4" style="margin-left:3cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">.</span>Properties - klíče si ukládám do lexikograficky setřízené množiny, kterou pak předávám jednotlivým metodám (viz výše). Toto mi umožňuje vzít podmnožinu obsahující klíče větší nebo rovny nějakému řetězci, v mém případě předponě náležející generovanému prvku a tu procházet do okamžiku, kdy narazím na klíč nemající danou předponu, pak vím že jsem prošel všechny klíče patřící danému prvku.<span class="odfLiEnd"/> </p></li><li><p class="P4" style="margin-left:3cm;"><span class="Numbering_20_Symbols" style="display:block;float:left;min-width:0.635cm;">.</span>XML - prořadí vygenerovaných elemntů je dáno pořadím volání generujících metod, vyjímkou je metoda processParams, která umožňuje vložit elemnty na konkrétní pozici (viz výše)<span class="odfLiEnd"/> </p></li></ul><p class="Text_20_body"> </p><h1 class="P1"><a id="a__Závěr"><span/></a>Závěr</h1><p class="Standard">Závěr</p><p class="Text_20_body">Výsledkem naší práce je použitelná aplikace.</p></body></html>