<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>Log4j converter - Závěrečná zpráva</title>

    <author>
      <firstname>Michal</firstname>

      <surname>Pochobradský</surname>

      <affiliation>
        <orgname/>
      </affiliation>
    </author>

    <pubdate/>
  </articleinfo>

  <section>
    <title>Log4j converter</title>

    <para>Cílem projektu bylo vytvořit konzolovou aplikaci na koverzi
    konfigurace log4j mezi formáty souborů properties a XML. Výsledná aplikace
    se skládá ze tří tříd:</para>

    <itemizedlist>
      <listitem>
        <para>Log4JConveter - hlavní třída aplikace, stará se o uživatelský
        vstup.</para>
      </listitem>

      <listitem>
        <para>XMLToProperties - stará se o konverzi z XML do properties</para>
      </listitem>

      <listitem>
        <para>PropertiesToXML - stará se o konverzi z properties do XML</para>
      </listitem>
    </itemizedlist>

    <para/>
  </section>

  <section>
    <title>Třída PropertiesToXML</title>

    <para>Mým hlavním přínosem k projektu byla implementace třídy
    PropertiesToXML. Jak již bylo uvedeno její úlohou je konverze nastavení
    Log4j z, properties souboru do xml. Konvertovaný soubor je třídě předložen
    jako parametr konstruktoru. Samotnou konverzi zajišťuje metoda convert,
    která má dvě varianty, buď s jedním vstupním parametrem, kterým je název
    výstupní soubor do něhož se má výsledek konverze uložit, nebo bez
    parametru, pak se výsledek konverze vypíše na standartní výstup.</para>

    <para>Vsstupní soubor je zpracováván pomocí třídy Properties a průběžné
    výsledky jsou udržovány ve formě DOM stromu prostředky prostředí Java.
    Konverze třídy je rozdělena do jednotlivých metod zpracovávajících
    konkrétní prvky konfigurace. Obecně lze tyto metody rozdělit na dvě
    skupiny podle toho kde se v XML nachází jimi generovaný element na prvky
    "hlavní" a "vedlejší".</para>

    <itemizedlist>
      <listitem>
        <para>Hlavní prvky - jsou prvky, které jsou přímo potomky kořenového
        elementu. Jejich metody jsou tvaru <code>void
        convertNazevPrvku(Properties properties, SortedSet&lt;String&gt; keys,
        Element configurationElemnt)</code>, kde
        <emphasis>properties</emphasis> obsahuje vstupní data,
        <emphasis>keys</emphasis> jsou setřazené klíče do
        <emphasis>properties</emphasis> (viz níže) a
        <emphasis>configurationElemnt</emphasis> je kořenový element. Každá z
        těchto metod zná pevně danou předponu klíče podle které určí klíče,
        které náleží jí zpracovávanému prvku. Tyto metody jsou volány pouze
        metodou doConvert().</para>
      </listitem>

      <listitem>
        <para>Vedlejší prvky - jsou prvky, jež jsou částí některého hlavního
        prvku, tedy jsou potomky jeho elementu.Jejich metody jsou tvaru
        <code>String processNazevPrvku(Properties properties,
        SortedSet&lt;String&gt; keys, String currentPrefix, Element
        element)</code>, kde význam <emphasis>properties</emphasis> a
        <emphasis>keys</emphasis> je stejný jako u hlavních prvků,
        <emphasis>currentPrefix</emphasis> je předpona klíče prvku
        zpracovávaného volající funkcí a <emphasis>element</emphasis> je XML
        element prvku generovaný volající funkcí. Tyto metody vytváří při
        každém volání novou předponu připojením svého "klíčovho slova" k
        přeponě <emphasis>currentPrefix</emphasis>. Tyto metody jsou volány
        jednak z metod hlavních prvků, ale také se mohou volat mezi
        sebou.</para>
      </listitem>

      <listitem>
        <para>Vyjímky - metoda <code>convertConfig</code>,která generuje
        kořenový element <code>log4j:configuration</code>, je obdobou metod
        hlavních prvků, ale celkem logicky nemá atribut
        <emphasis>configurationElemnt</emphasis>, naopak jej vrací. Metoda
        <code>processParams</code> je obdobou metod vedleších prvků, ale navíc
        má atributy <emphasis>position</emphasis> a
        <emphasis>ignored</emphasis>, kde <emphasis>position</emphasis> je
        pozice, kam se mají do <emphasis>element</emphasis>u vložit
        vygenerované elementy <code>param</code> a
        <emphasis>ignored</emphasis> je seznam klíčových slov patřících jiným
        prvkům právě generovaného prvku.</para>
      </listitem>
    </itemizedlist>

    <para>Asi největším problémem, na který jsem narazil, byl v tom, jak XML a
    properties přistupují k řazení prvků. Zatímco v properties může být pořadí
    prakticky libovolné, DTD log4j klade poměrně velmi striktní podmínky na
    pořadí jednotlivých elemntů. Rešení:</para>

    <itemizedlist>
      <listitem>
        <para>Properties - klíče si ukládám do lexikograficky setřízené
        množiny, kterou pak předávám jednotlivým metodám (viz výše). Toto mi
        umožňuje vzít podmnožinu obsahující klíče větší nebo rovny nějakému
        řetězci, v mém případě předponě náležející generovanému prvku a tu
        procházet do okamžiku, kdy narazím na klíč nemající danou předponu,
        pak vím že jsem prošel všechny klíče patřící danému prvku.</para>
      </listitem>

      <listitem>
        <para>XML - prořadí vygenerovaných elemntů je dáno pořadím volání
        generujících metod, vyjímkou je metoda <code>processParams</code>,
        která umožňuje vložit elemnty na konkrétní pozici (viz výše)</para>
      </listitem>
    </itemizedlist>

    <para/>
  </section>

  <section>
    <title>Závěr</title>

    <para>Výsledkem naší práce je použitelná aplikace.</para>
  </section>
</article>
